============java.sql & javax.sql============

São pacotes que vêm com o JDBC e nos permitem fazer diversas ações SQL, como conectar a um banco de dados, executar ações no banco e etc.

============Connection============

É uma classe que representa uma conexão a um banco de dados feita pelo JDBC.

============DriverManager============

É uma classe do JDBC que nos permite fazer várias ações utilizando o driver JDBC que temos no nosso projeto, que pode ser MySQL, PostgreSQL, etc.

Nos permite fazer ações como abrir uma conexão e outras coisas.

============prepareStatement(<sql>)============

É um método que utilizamos para montar a nossa query SQL a partir de uma String de query.

É importante saber que quando criamos a String para a nossa query, não precisamos passar os valores que queremos que sejam inseridos nessa query diretamente na String, apenas passamos um sinal "?" e inserimos esses valores depois com o método "prepareStatement()"

Esse método retorna um "PreparedStatement", que contém diversos métodos que podemos utilizar para definir os valores que marcamos com "?", como, por exemplo, o método "setInt(<index>, <valor>)", que transforma o valor de índice passado no número inteiro que estamos passando. Existem métodos parecidos com o "setInt" para diversos tipos do Java.

Podemos executar o nosso "PreparedStatement" com o método "execute()" dele. Ele retorna um booleano informando se a query foi executada corretamente e é mais utilizado para queries de inserção por esse motivo. temos outros métodos para outros tipos de queries.

O PreparedStatement deve ser fechado no fim, pois ele permanece aberto por padrão. Ele é utilizado pelos bancos de dados para fins de cache e diversas outras coisas.

============executeQuery()============

É um método de PreparedStatement que irá executar a nossa query e retornar os registros encontrados na forma de um ResultSet.

Esse ResultSet é um pouquinho diferente dos Sets convencionais, mas possui métodos que nos permitem fazer iteração e diversos outros métodos que podemos utilizar.

next():

    É um método que retorna um booleano representando se existem mais itens no ResultSet ou não e passa para o próximo item no nosso ResultSet (na primeira vez vai para o primeiro mesmo), assim fazendo que possamos acessar as informações de cada registro por vez pelo próprio objeto do ResultSet. Muito estranho.

Possui alguns métodos que podemos utilizar para pegar informações do registro com o tipo de dado certo, como "getInt(<index>)".

Precisamos fechar o ResultSet.

============Statement============

É uma classe parecida com a classe "PreparedStatement", mas com a diferença de que ela não possui os métodos de set, dessa forma nos fazendo ter que inserir os dados na string por meio de concatenação.

Não é recomendado utilizá-la, tendo em vista que damos brecha para um ataque de SQL Injection, já que estaremos concatenando qualquer coisa na nossa String, dando possibilidade de alguém mal intencionado inserir um SQL que irá deletar o banco de dados ou algo do tipo.

============DAO (Data Access Object)============

Classes DAO tem como objetivo isolar as interações com o banco de dados, de forma que a lógica de fazer qualquer ação com o banco de dados fique isolada nessa classe e as demais classes do nosso sistema tenham suas próprias responsabilidades, sem terem que se preocupar com a interação com o banco de dados em si.

============CONNECTION POOL============

É um conceito muito útil de reutilização de conexões ao banco, para que não tenhamos que realmente reabrir conexões com o banco para cada ação que formos fazer nele no nosso código.

Consiste na ideia de ter um grupo de conexões que estarão abertas e que serão utilizadas quando abrirmos uma nova conexão ao nosso banco, ou seja, não estaremos realmente abrindo uma nova conexão, e sim aproveitando essa que já estava na pool. Quando fecharmos a conexão que abrirmos, essa conexão voltará a estar disponível na Connection Pool.

Connection pool é escalável e pode ser modificada conforme a demanda.

O pacote de connection pool mais utilizado no mundo Java é o HikariCP. É dele que as exceptions do HikariPool vêm.

Utilizamos o HikariCP para abrir as nossas conexões no lugar do DriverManager, devolvendo um HikariDataSource e utilizando um HikariConfig para passar a nossa URL JDBC, username, password, pool size máximo, etc. Não irei entrar em detalhes de como fazer isso, pois é uma tarefa nada trivial.

Utilizamos o método "getConnection()" do HikariDataSource para abrirmos a conexão a partir dele.

Se não existirem conexões disponíveis na connection pool quando algum usuário fizer uma requisição ao banco, o próprio HikariCP irá garantir com que a requisição seja feita assim que uma das conexões sendo utilizadas seja liberada. Isso é muito incrível.

